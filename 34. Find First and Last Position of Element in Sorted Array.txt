//Мой код. Просто бинарный поиск по двум циклам. В первом ищем крайний левый таргет. В правом крайний правый.
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> answer; 
        int left = 0;
        int right = nums.size() - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2; //Такое определение помогает избежать переполнения int.
            if (nums[left] == target) {
                answer.push_back(left);
                right = nums.size() - 1;
                break;
            }
            if (nums[mid] == target) {
                right = mid;
                left++;
            }
            else if (nums[mid] < target)
                left = mid + 1; 
            else
                right = mid - 1;
        }		
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[right] == target) {
                answer.push_back(right);
                return answer;
            }
            if(nums[mid] > target)
                right = mid - 1;
            else {			//nums[mid] == target
                left = mid;
                right--;
            }
        }
        return {-1, -1};
    }
};