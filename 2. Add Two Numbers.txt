//Самое сложное сделать связные списки для проверки) хуйня а не задача
//Просто создаёшь свой связной список и забиваешь в него обычное сложение в столбик из l1 и l2
//Остаток переносишь на следующую итерацию.




// МОЙ КОД МОЙ КОД МОЙ КОД/////
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode tempList_l1;
        ListNode tempList_l2;

        tempList_l1.val = l1->val;
        tempList_l1.next = l1->next;
        tempList_l2.val = l2->val;
        tempList_l2.next = l2->next;

        ListNode *firstList = nullptr;
        ListNode *last = nullptr;
        int dozen = 0;
        int maxL1 = 0, maxL2 = 0;
        ListNode* coutL1 = l1;
        ListNode* coutL2 = l2;

        while (coutL1)
        {
            maxL1++;
            coutL1 = coutL1->next;
        }
            
        while (coutL2)
        {
            maxL2++;
            coutL2 = coutL2->next;
        }
        for (int cout = 0; cout < max(maxL1, maxL2) || dozen != 0; cout++)
        {
            ListNode * workList = new ListNode;
            int tempVal;
            if (cout == 0)
            {
                firstList = workList;
                tempVal = tempList_l1.val + tempList_l2.val + dozen;
            }	
            else
            {
                last->next = workList;
                if (cout < min(maxL1, maxL2))
                {
                    tempList_l1 = *tempList_l1.next;
                    tempList_l2 = *tempList_l2.next;
                    tempVal = tempList_l1.val + tempList_l2.val + dozen;
                }
                else
                {
                    if (cout < max(maxL1, maxL2))
                    {
                        if (maxL1 > maxL2)
                        {
                            tempList_l1 = *tempList_l1.next;
                            tempVal = tempList_l1.val + dozen;
                        }
                        else
                        {
                            tempList_l2 = *tempList_l2.next;
                            tempVal = tempList_l2.val + dozen;
                        }
                    }
                    else
                        tempVal = dozen;
                }
            }
            dozen = 0;
            if (tempVal > 9)
            {
                dozen = tempVal / 10;
                tempVal = tempVal % 10;
            }
            workList->val = tempVal;
            workList->next = NULL;
            last = workList;
        }
        return firstList;
    }
};